// Generated by CoffeeScript 1.6.3
(function() {
  window.Fixes = (function() {
    var headerHeight, public_functions, statusBarHeight;
    statusBarHeight = 0;
    headerHeight = 51;
    return public_functions = {
      headerHeight: function() {
        return headerHeight;
      },
      detectPlatform: function() {
        var className, re;
        window.config.platform = navigator.userAgent.match(/android 4/i) ? "android4" : navigator.userAgent.match(/android (2|3)/i) ? "android2" : navigator.userAgent.match(/(ipod|ipad|iphone)/i) ? "ios" : navigator.userAgent.match(/(IEMobile|MSIE)/i) ? "wp" : "desktop";
        if (navigator.appName === 'Microsoft Internet Explorer') {
          window.config.browser = "IE";
          re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
          if (re.exec(navigator.userAgent) !== null) {
            window.config.browser_version = parseFloat(RegExp.$1);
          }
        }
        window.config.headers = {
          OS_TYPE: navigator.platform,
          APP_VERSION: config.version,
          DEVICE: navigator.appCodeName + " " + navigator.appName + " " + navigator.vendor,
          DEVICE_ID: config.device_id,
          OS_VERSION: navigator.userAgent
        };
        console.log("platform", config.platform, config.browser, config.browser_version, config.headers);
        className = window.mozInnerScreenX != null ? "desktop firefox" : config.platform;
        return $("body").addClass(className);
      },
      isFirefox: function() {
        return window.mozInnerScreenX != null;
      },
      backboneSuper: function() {
        return Backbone.Model.prototype._super = function(funcName) {
          return this.constructor.__super__[funcName].apply(this, _.rest(arguments));
        };
      },
      fastClick: function() {
        /*
        Remove click delay on mobile wekkit
        */

        if (config.platform !== 'wp') {
          if (typeof FastClick !== "undefined" && FastClick !== null) {
            return new FastClick(document.body);
          }
        }
      },
      preventWindowMovement: function() {
        /*
        Prevent bouncing of browser window. Add a class "fixed" for all the elements that should not be moved and are causing trouble with scrolling
        E.g.:  headers and footers
        */

        var _this = this;
        return $("input, textarea, .fixed").on('touchmove', function(event) {
          return event.preventDefault();
        });
      },
      adjustHeightToIPhoneStatusBar: function() {
        /*
        On an iPhone you must set height in pixels for iPhone bounce issues
        */

        if (config.fixed_header) {
          $("#app").css("height", (window.screenHeight - statusBarHeight) + "px");
          return $("#pageManager").css("height", (window.screenHeight - statusBarHeight - headerHeight) + "px");
        }
      },
      iPhoneOverflowScroll: function(pageElement, contentsElement) {
        /*
        Fix scrolling issues for iPhone when using overflow:scroll
        */

        if (config.platform !== 'desktop') {
          if (config.fixed_header && (typeof ScrollFix !== "undefined" && ScrollFix !== null)) {
            new ScrollFix(pageElement.get(0));
            pageElement.css("height", (window.screenHeight - statusBarHeight - headerHeight) + "px");
            return contentsElement.css("min-height", (window.screenHeight - statusBarHeight - headerHeight + 1) + "px");
          }
        }
      },
      AndroidHistoryFix: function() {
        /*
        Fix Backbone.History for cheap android phones
        */

        return $(document).on('click', function(event) {
          var element, uri;
          element = event.target.nodeName === "A" ? event.target : $(event.target).parents("a").get(0);
          if (element) {
            uri = element.hash.substr(1);
            app.navigate(uri);
          }
          return event.preventDefault();
        });
      },
      IEConsole: function() {
        /*
        Fix for IE not supporting console
        */

        if (typeof console === "undefined") {
          return window.console = {
            log: function() {},
            warn: function() {},
            error: function() {}
          };
        }
      },
      polyfillPlaceholders: function(element) {
        var input_blur, input_focus,
          _this = this;
        if (config.platform === 'wp') {
          input_focus = function(event) {
            var input;
            input = $(this);
            if (input.val() === input.attr('placeholder')) {
              input.val('');
              return input.removeClass('empty');
            }
          };
          input_blur = function(event) {
            var input;
            input = $(this);
            if (input.val() === '') {
              input.val(input.attr('placeholder'));
              return input.addClass('empty');
            }
          };
          return _.delay(function() {
            var input, inputs, _i, _len, _results;
            inputs = element.find('input[placeholder], textarea[placeholder]');
            _results = [];
            for (_i = 0, _len = inputs.length; _i < _len; _i++) {
              input = inputs[_i];
              if (typeof holder === "undefined" || holder === null) {
                input = $(input);
                input.val(input.attr('placeholder'));
                input.addClass('empty');
                input.on('focus', input_focus);
                _results.push(input.on('blur', input_blur));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }, 500);
        }
      },
      getInputValuePlaceholderFix: function(input) {
        if (input.val() === input.attr('placeholder')) {
          return '';
        } else {
          return input.val();
        }
      }
    };
  })();

}).call(this);
