// Generated by CoffeeScript 1.6.3
(function() {
  window.App = Backbone.Model.extend({
    defaults: {
      startup_hash: void 0,
      street: {},
      reminder: {}
    },
    initialize: function() {
      var _this = this;
      _.bindAll(this);
      Fixes.IEConsole();
      this.generateDeviceId();
      this.readSettingsFromLocalstorage();
      Fixes.detectPlatform();
      if (config.platform === 'wp' || config.platform === 'android2') {
        config.fixed_header = false;
      } else {
        config.fixed_header = true;
      }
      this.onResize();
      $(window).on("resize", this.onResize);
      $(window).on('orientationchange', this.onRotate);
      Fixes.backboneSuper();
      Fixes.fastClick();
      Fixes.preventWindowMovement();
      this.set({
        startup_hash: location.hash.substr(config.hash_characters.length)
      });
      this.on('change:street change:reminder', this.onSettingsChange);
      this.startup();
      return _.defer(function() {
        _this.router = new Router();
        Backbone.history.start();
        _this.streetManager = new StreetManager;
        _this.pageManager = new PageManager({
          router: _this.router
        });
        _this.pageManagerView = new PageManagerView({
          model: _this.pageManager,
          el: document.getElementById("pageManager")
        });
        _this.pageManagerView.render();
        return _this.openFirstPage();
      });
    },
    openFirstPage: function() {
      var last_position, startup_hash, uri,
        _this = this;
      last_position = Cache.readFromLocalStorage("last_position");
      startup_hash = this.get('startup_hash');
      if (startup_hash) {
        uri = startup_hash;
      } else {
        if (last_position !== false) {
          console.log("restored your last position");
          uri = last_position;
        } else {
          uri = config.uri.intro.step1;
        }
      }
      return _.defer(function() {
        return _this.navigate(uri);
      });
    },
    navigate: function(uri) {
      return this.router.navigate(uri, {
        trigger: true
      });
    },
    onResize: function() {
      window.screenWidth = $(document).width();
      window.screenHeight = document.innerHeight ? document.innerHeight : $(document).height();
      return Fixes.adjustHeightToIPhoneStatusBar();
    },
    onRotate: function() {
      return this.repaint();
    },
    generateDeviceId: function() {
      var device_id, error;
      device_id = localStorage["device-id"];
      if (!device_id) {
        device_id = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r, v;
          r = Math.random() * 16 | 0;
          v = c === 'x' ? r : r & 0x3 | 0x8;
          return v.toString(16);
        });
        console.log("created new device-id", device_id);
        try {
          localStorage.setItem("device-id", device_id);
        } catch (_error) {
          error = _error;
          console.warn("localStorage not available", error);
        }
      }
      return config.device_id = device_id;
    },
    startup: function() {
      var startupPage, uri;
      uri = config.uri.intro.step1;
      document.location.hash = "";
      startupPage = uri;
      return config.pages = [startupPage];
    },
    repaint: function() {
      this.onResize();
      return this.get('pageManagerView').render();
    },
    onSettingsChange: function() {
      localStorage.setItem("street", JSON.stringify(this.get('street')));
      localStorage.setItem("reminder", JSON.stringify(this.get('reminder')));
      console.log("saved street and reminder", JSON.parse(localStorage["street"], JSON.parse(localStorage["reminder"])));
      return this.setNativeReminders();
    },
    readSettingsFromLocalstorage: function() {
      var reminder, street;
      street = localStorage["street"] ? JSON.parse(localStorage["street"]) : {};
      if (street != null) {
        this.set({
          street: street
        });
      }
      reminder = localStorage["reminder"] ? JSON.parse(localStorage["reminder"]) : {};
      if (reminder != null) {
        return this.set({
          reminder: reminder
        });
      }
    },
    setNativeReminders: function() {
      var data, echo, pickups, sector;
      sector = app.get('street').sector;
      pickups = this.streetManager.getPickupsForSector(sector);
      data = {
        sector: sector,
        pickups: pickups
      };
      echo = function(data, callback) {
        console.log("doing echo");
        return cordova.exec(callback, function(err) {
          return callback('Nothing to echo.');
        }, "Echo", "echo", [data]);
      };
      return echo(data, function() {
        return console.log("echoed");
      });
    }
  });

  if (window.device) {
    $(document).on('deviceready', function() {
      return window.app = new App();
    });
  } else {
    $(function() {
      return window.app = new App();
    });
  }

}).call(this);
