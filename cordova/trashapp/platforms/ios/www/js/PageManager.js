// Generated by CoffeeScript 1.6.3
(function() {
  window.PageManager = Backbone.Model.extend({
    defaults: {
      active: null
    },
    initialize: function() {
      _.bindAll(this);
      this.pageCollection = new PageCollection();
      this.pageCollection.on("remove", this.onRemove);
      this.on("change:active", this.onChangeActive);
      return app.router.on('route:onRouteChanged', this.addOrSwitchToPage);
    },
    onRemove: function(model) {
      if (model.get('position') === 0) {
        return model.set({
          position: model.get("position") + 10000
        });
      }
    },
    updatePositions: function() {
      var _this = this;
      return this.pageCollection.each(function(element, index) {
        return element.set({
          position: index - _this.get("active")
        });
      });
    },
    onChangeActive: function(model, value, options) {
      this.updatePositions();
      return this.loadingIndicator();
    },
    loadingIndicator: function() {
      if ((this.getActivePage() != null) && this.getActivePage().get("html") === "") {
        this.set({
          isLoading: true
        });
        return this.getActivePage().once("change:html", this.loadingFinished);
      } else {
        return this.set({
          isLoading: false
        });
      }
    },
    loadingFinished: function() {
      var _this = this;
      clearTimeout(this.get("loadTimeout"));
      return this.set({
        "loadTimeout": setTimeout(function() {
          return _this.set({
            isLoading: false
          });
        }, 500)
      });
    },
    addOrSwitchToPage: function(uri) {
      var found, newActive, newPage, pageClassName, pagesToRemove, reuse_pages,
        _this = this;
      reuse_pages = false;
      found = reuse_pages && this.pageCollection.hasPage(uri);
      if (found === false) {
        pageClassName = this.classForType(uri);
        newPage = new pageClassName({
          uri: uri
        });
        this.pageCollection.add(newPage);
        if (this.get("active") != null) {
          newActive = this.get("active") + 1;
        } else {
          newActive = 0;
        }
      } else {
        if (this.pageCollection.length > 1) {
          pagesToRemove = this.pageCollection.rest(found + 1);
          this.pageCollection.remove(pagesToRemove);
        }
        newActive = found;
      }
      this.trackPage(uri);
      return _.defer(function() {
        return _this.set({
          active: newActive
        });
      });
    },
    clearHistory: function() {
      var pagesToRemove,
        _this = this;
      if (this.pageCollection.length > 1) {
        pagesToRemove = this.pageCollection.initial();
        this.pageCollection.remove(pagesToRemove);
        return _.defer(function() {
          return _this.set({
            active: 0
          });
        });
      }
    },
    getActivePage: function() {
      return this.pageCollection.at(this.get("active"));
    },
    classForType: function(uri, asView) {
      var className;
      if (asView == null) {
        asView = false;
      }
      className = uri === "" ? "" : uri.charAt(0).toUpperCase() + uri.slice(1);
      className += "Page";
      if (asView) {
        className += "View";
      }
      if (window[className] == null) {
        className = asView ? "PageView" : "Page";
      }
      return window[className];
    },
    trackPage: function(uri) {
      if (typeof _gaq !== "undefined" && _gaq !== null) {
        return _gaq.push(['_trackPageview', "/" + uri]);
      }
    }
  });

  window.PageManagerView = Backbone.View.extend({
    initialize: function() {
      _.bindAll(this);
      this.notifications = [];
      this.loadingIndicator = $(".loading");
      this.model.pageCollection.on("reset", this.render);
      this.model.pageCollection.on("add", this.addPage);
      this.model.pageCollection.on("remove", this.removePage);
      this.model.on("change:isLoading", this.loadingChanged);
      return this.model.on("change:active", this.clearNotifications);
    },
    addPage: function(page) {
      var asView, pageElement, pageViewClass;
      pageViewClass = this.model.classForType(page.get('uri'), asView = true);
      pageElement = (new pageViewClass({
        model: page
      })).render().$el;
      if (!page.get("pageElement")) {
        page.set({
          pageElement: pageElement
        });
      }
      return this.$el.append(pageElement);
    },
    removePage: function(model) {
      return _.delay(function() {
        var pageElement;
        pageElement = model.get("pageElement");
        return pageElement.remove();
      }, 400);
    },
    loadingChanged: function() {
      return this.loadingIndicator.toggleClass("animate", this.model.get("isLoading"));
    },
    render: function() {
      var _this = this;
      this.$el.empty();
      this.model.pageCollection.each(function(element, index) {
        return _this.addPage(element);
      });
      return this;
    }
  });

}).call(this);
