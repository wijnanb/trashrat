// Generated by CoffeeScript 1.6.3
(function() {
  window.Page = Backbone.Model.extend({
    defaults: {
      position: 0
    },
    initialize: function() {
      var firstpage;
      firstpage = app.pageManager.pageCollection.length === 0;
      if (!firstpage) {
        return this.set({
          position: 1
        });
      }
    },
    isActive: function() {
      return this.get("position") === 0;
    }
  });

  window.PageCollection = Backbone.Collection.extend({
    model: Page,
    hasPage: function(uri) {
      var index, uriList;
      uriList = this.pluck("uri");
      index = _.indexOf(uriList, uri);
      if (index === -1) {
        return false;
      } else {
        return index;
      }
    }
  });

  window.PageView = Backbone.View.extend({
    className: "page",
    template: Templates.stub,
    context: {},
    initialize: function() {
      _.bindAll(this);
      return this.model.on("change:position", this.onChangePosition);
    },
    onChangePosition: function() {
      var _this = this;
      return _.delay(function() {
        return _this.updatePosition();
      }, 30);
    },
    updatePosition: function() {
      var position, screenWidth;
      screenWidth = window.screenWidth;
      position = this.model.get("position");
      if (!config.fixed_header) {
        this.$el.toggle(position === 0);
      } else {
        if (position < 0) {
          this.$el.css("-webkit-transform", "translate3d(-" + screenWidth + "px,0px,0px)");
          this.$el.css("-moz-transform", "translate3d(-" + screenWidth + "px,0px,0px)");
          this.$el.css("-o-transform", "translate3d(-" + screenWidth + "px,0px,0px)");
          this.$el.css("transform", "translate3d(-" + screenWidth + "px,0px,0px)");
        } else if (position > 0) {
          this.$el.css("-webkit-transform", "translate3d(" + screenWidth + "px,0px,0px)");
          this.$el.css("-moz-transform", "translate3d(" + screenWidth + "px,0px,0px)");
          this.$el.css("-o-transform", "translate3d(" + screenWidth + "px,0px,0px)");
          this.$el.css("transform", "translate3d(" + screenWidth + "px,0px,0px)");
        } else if (position === 0) {
          this.$el.css("-webkit-transform", "translate3d(0px,0px,0px)");
          this.$el.css("-moz-transform", "translate3d(0px,0px,0px)");
          this.$el.css("-o-transform", "translate3d(0px,0px,0px)");
          this.$el.css("transform", "translate3d(0px,0px,0px)");
        }
      }
      return this.$el.toggleClass("active", this.model.isActive());
    },
    render: function() {
      var contents;
      this.context = this.contextForTemplate();
      this.context.uri = this.model.get('uri');
      contents = $("<div class='contents'></div>");
      contents.append(this.template(this.context));
      this.$el.html(contents);
      this.pageSpecificRender();
      Fixes.iPhoneOverflowScroll(this.$el, contents);
      this.updatePosition();
      return this;
    },
    pageSpecificRender: function() {},
    contextForTemplate: function() {
      return {};
    }
  });

}).call(this);
